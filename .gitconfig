[alias]

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format
	s = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Merge GitHub pull request on top of the `master` branch
	mpr = "!f() { \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git rebase master pr/$1 && \
			git checkout master && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[diff]

	# Detect copies as well as renames
	renames = copies

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]

	# Use the Git 1.x.x default to avoid errors on machines with old Git
	# installations. To use `simple` instead, add this to your `~/.extra` file:
	# `git config --global push.default simple`. See http://git.io/mMah-w.
	default = matching

# URL shorthands

[url "git@github.com:"]

	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

	insteadOf = "github:"

[url "git@gist.github.com:"]

	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

	insteadOf = "gist:"
[user]
    name = Drew Wells
    email = drew.wells00@gmail.com
[alias]
    browse = !sh -c 'hub browse WhaleShark/RetailMeNot'
    gui = !sh -c '/usr/local/git/libexec/git-core/git-gui'
    br = branch -v
    bc = branch -v --contains
    co = checkout
    st = status -sb
    ss = show --stat
    c  = cherry -v
    cp = cherry-pick
    l = log --no-merges
    lr = log --reverse
    ls = log --stat=,80 --no-merges
    lc = log -1
    la = log -6
    lg = log --graph --abbrev-commit --date=relative
    lga = log --graph -10
    lgfp = log --graph --first-parent
    lo = log --pretty=one
    lp = log --pretty=format:\"%h %s\" --graph --color
    ds = diff --stat
    dt = difftool
    d = diff -w
    dc = diff -w --cached
    df = !sh -c 'git d $1^! -- $2' -
    dr = !sh -c 'git d `cat .git/rebase-merge/stopped-sha`^! -- $1' -
    rc = rebase --continue
    whale = !sh -c 'git clone git@github.com:WhaleShark/$1 $2' -
    jira = !sh -c 'git log -1 $1 --pretty=stash' -
    puppet = !sh -c 'git log -1 $1 --pretty=puppet' -
    cn = !sh -c 'git jira $1| pbcopy' -
    pf = !sh -c 'git push --no-verify'
    pp = !sh -c 'git puppet $1| pbcopy' -
    unstage = reset HEAD --
    last = log -1 HEAD
    ignore = update-index --assume-unchanged
    unignore = update-index --no-assume-unchanged
    ignored = !git ls-files -v | grep \"^[[:lower:]]\"
    irm = #!sh -c "git ignore $(git st --short | grep '^ D' | sed 's/^ D //')"
    mt = mergetool
    #gl = !sh -c 'git log -i --pretty=format:\"http://github.com/whaleshark/retailmenot/commit/%h : %s\" --grep=$1' -
    gl = !sh -c 'git log -i --pretty=format:\"https://stash.rmn.com/projects/RMN/repos/retailmenot/commits/%h : %s\" --grep=$1' -
    up = !sh -c 'git fetch && git rebase -p && git new' -
    new = !sh -c 'git ls $1@{1}..$1@{0} \"$@\"' -
    nd = !sh -c 'git ds $1@{1}..$1@{0} \"$@\"' -
    force = !sh -c 'git fetch && git reset --hard origin/${1:-$(git rev-parse --abbrev-ref HEAD)}' -
    f = force
    as = !sh -c 'git diff -w --no-color "$@" | git apply --cached --ignore-whitespace' -

[apply]
    whitespace = nowarn
[branch]
    autosetuprebase = always
[core]
    excludesfile = /Users/drew/Emacs.gitignore
    editor = emacsclient -t
    #editor = nano
    ignorecase = true
    whitespace = =
    deltaBaseCacheLimit = 1G
    pager = less -+S
[diff]
    tool = p4mergetool
    rename = 6940
[merge]
	tool = p4mergetool
[mergetool "custom"]
	cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge "\"$PWD/$BASE\"" "\"$PWD/$REMOTE\"" "\"$PWD/$LOCAL\"" "\"$PWD/$MERGED\""
	keepTemporaries = false
	trustExitCode = false
	keepBackup = false
[clean]
    requireForce = false
[push]
    default = tracking
[pretty]
    stash = format:https://stash.rmn.com/projects/RMN/repos/retailmenot/commits/%h%n{noformat}%h %B%n{noformat}
    jira = format:https://github.com/WhaleShark/RetailMeNot/commit/%h%n{noformat}%h %B%n{noformat}
    puppet = format:https://github.com/WhaleShark/puppet/commit/%h%n%h %B%n
[format]
    pretty = format:%C(red)%h%Creset%C(blue)%d%Creset %s %C(green)(%an)%Creset %cn %C(cyan)%ar%Creset
[achievement]
    upload = false
[color]
    ui = auto
[github]
    user   = drewwells
    token  = 6791eae0efd22d05a3d298a9ce3806cc
[rerere]
    enabled    = true
    autoupdate = true
[gui]
	fontdiff = -family \"Ubuntu Mono\" -size 13 -weight normal -slant roman -underline 0 -overstrike 0
[mergetool "p4mergetool"]
	cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge $PWD/$BASE $PWD/$REMOTE $PWD/$LOCAL $PWD/$MERGED
	trustExitCode = false
[mergetool]
	keepBackup = false
[mergetool "p4merge"]
	cmd = p4merge $BASE $LOCAL $REMOTE $MERGED
[difftool "p4merge"]
	cmd = p4merge $BASE $LOCAL $REMOTE $MERGED
[difftool "p4mergetool"]
	cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge $LOCAL $REMOTE
